[useEffect(), fetch()]

** useEffect() 함수 **
-> 어떤 상태값이 바뀌었을 때 동작하는 함수 작성

const [days, setDays] = useState([]);
const [count, setCount] = useState(0);

function onclick() {
    setCount(count+1);
}

function onclick2() {
    setDays([
        ...days,
        {
            id : Math.random(),
            day : 1
        }
    ]);
}

: ...days는 days의 모든 원소들을 뜻한다

useEffect(() => {
    console.log("count change");
}, [count])

: 첫 번째 매개변수로 함수를 넣는다
: 이 함수가 호출되는 타이밍은 렌더링 결과가 실제 돔에 반영된 직후(UI가 다 그려진 다음)
: 두 번째 매개변수로는 의존성 배열을 넣는다
: 두 번째 매개변수가 없으면 모든 종류의 변화에 useEffect() 첫 번째 매개변수 함수가 실행된다
: 의존성 배열이 있으면, 배열 내부의 state가 변화된 경우에만 함수 실행


의존성 배열이 없으면 모든 변화를 다 잡음
의존성 배열이 있으면 그 변화만 잡음
의존성 배열이 [] 빈 배열이면 첫 렌더링 직후 딱 한 번 시점만을 잡음


** fetch() **

useEffect(() => {
  fetch(`http://localhost:3001/words?day=${day}`)
      .then(res => {
          return res.json()
      })
      .then(data => {
          setWords(data)
      });
}, [day]);

: "words?day=${day}" 이건 GET 메서드이다
: fetch는 promise를 반환한다
: res는 http 응답이고 실제 json은 아니다
: res.json()을 하면 json으로 변환되고 promise를 반환한다
: 반환된 days json은 배열 형태이므로 setDays에 data를 바로 넣는다
: 만약 의존성 배열이 [] 이었다면 에러가 뜬다 
: useEffect 안에 state인 day가 있는데 day가 의존성 배열에 없기 때문이다
